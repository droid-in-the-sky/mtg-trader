/*{-{*/

@define(LIST_LINS,      5);
@define(LIST_COLS,      6);
@define(LIST_ITS_LINS,  2);
@define(LIST_ITS,       eval(LIST_LINS*LIST_ITS_LINS));
@define(LIST_SPCX,      5);
@define(LIST_SPCY,      2);

class List with
    event void        go;
    var   UIDrawable* drawable;
    var   int         ref;
    var   int         n;
    var   _float      tot;
do
    this.ref = _LUA_NOREF;
    this.n   = 0;
    this.tot = 0;

    var u8[ @eval(LIST_LINS*LIST_COLS) ] lay;
    // name, price, l1, l2
    // 1,1,1,1,1,2
    // 3,3,3,3,3,4
    // ...
    loop lin, LIST_LINS do
        loop col, LIST_COLS-1 do
            lay[lin*LIST_COLS+col] = lin*LIST_ITS_LINS + 1;
        end
        lay[lin*LIST_COLS+5] = lin*LIST_ITS_LINS + 2;
    end

    var UIDrawable*[ LIST_ITS ] draws;
    loop i, LIST_ITS do
        draws[i] = null;
    end

    var _SDL_Color clr_txt = global:clr_txt;

    var UIGrid grid;
        grid.clr_bg? = 1;
        grid.clr_bg = global:clr_bg;
        grid.spc_x = LIST_SPCX;
        grid.spc_y = LIST_SPCY;
        grid.lay_lins = LIST_LINS;
        grid.lay_cols = LIST_COLS;
        grid.lay = lay;
        grid.it_n = LIST_ITS;
        grid.it_draws = draws;
    this.drawable = &grid;

/*
    var UIScroll scroll;
        scroll.drawable = &grid;
    this.drawable = &scroll;
*/

    await/0 go;

    var _lua_State* lua = global:lua;
    _lua_rawgeti(lua, _LUA_REGISTRYINDEX, ref);     // [ l ]
    this.n = _lua_objlen(lua, -1);

    loop lin, LIST_LINS do
        if lin < this.n then
            // lin[i]
            var _char[255] name;
            var _char[10]  price;
            _lua_rawgeti(lua, -1, lin+1);           // [ lin | card ]
            _lua_getfield(lua, -1, "name");         // [ lin | card | name ]
            _sprintf(name, "%s", _lua_tostring(lua, -1));
            _lua_getfield(lua, -2, "price");        // [ lin | card | name | price ]
            var _float p = _lua_tonumber(lua, -1);
            this.tot = this.tot + p;
            _sprintf(price, "%.2f", p);
            _lua_pop(lua, 3);                       // [ lin ]

            // name
            do
                var UITexDrawable* d = new UITexDrawable;
                grid.it_ptr ::= d;
                draws[lin*LIST_ITS_LINS+0] := d;
                var _SDL_Surface* sfc :=
                    _TTF_RenderText_Shaded(global:font, name,
                                            clr_txt, grid.clr_bg);
                d:tex := _SDL_CreateTextureFromSurface(global:ren, sfc);
                d:tex_own? = 1;
                d:align_x = _UI_ALIGN_LEFT;
                _SDL_FreeSurface(sfc);
            end
            // price
            do
                var UITexDrawable* d = new UITexDrawable;
                grid.it_ptr ::= d;
                draws[lin*LIST_ITS_LINS+1] := d;
                var _SDL_Surface* sfc :=
                    _TTF_RenderText_Shaded(global:font, price,
                                            clr_txt, grid.clr_bg);
                d:tex := _SDL_CreateTextureFromSurface(global:ren, sfc);
                d:tex_own? = 1;
                d:align_x = _UI_ALIGN_RIGHT;
                _SDL_FreeSurface(sfc);
            end
        end
    end

    _lua_pop(lua, 1);                               // [ ]

    // TODO: listener for card figure
    await FOREVER;
end

/*}-}*/ dnl
