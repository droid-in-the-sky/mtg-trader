/*{-{*/

class UIScroll with
    interface UI;
    var UI* ui;
    var _SDL_Color scroll_clr;
do
    this.ui = null;

    await/0 go;
        _assert(ui != null);

    event int go_x=0, go_y=0;

    var _SDL_Rect* r = await/0 go_redim;
    par do
        loop do
            var _SDL_MouseButtonEvent* but = await go_mousebuttondown;
            emit ui:go_mousebuttondown=but;

            var _SDL_Point pt1, pt2;
                pt1.x = but:x;
                pt1.y = but:y;

            loop do
                await 50ms;
                var int s = _SDL_GetMouseState(&pt2.x, &pt2.y);
                if not s then
                    break;
                end
                pt1.x = pt2.x - pt1.x;
                pt1.y = pt2.y - pt1.y;

                // LIMITS
                if ui:rect.w > rect.w then
                    if pt1.x > 0 then
                        var int max_x  = rect.x;
                        var int max_dx = max_x - ui:rect.x;
                            if pt1.x > max_dx then
                                pt1.x = max_dx;
                            end
                    else/if pt1.x < 0 then
                        var int min_x  = rect.x - (ui:rect.w-rect.w);
                        var int min_dx = min_x - ui:rect.x;
                        if pt1.x < min_dx then
                            pt1.x = min_dx;
                        end
                    end
                    emit go_x=1;
                else
                    pt1.x = 0;
                end

                if ui:rect.h > rect.h then
                    if pt1.y > 0 then
                        var int max_y  = rect.y;
                        var int max_dy = max_y - ui:rect.y;
                        if pt1.y > max_dy then
                            pt1.y = max_dy;
                        end
                    else/if pt1.y < 0 then
                        var int min_y  = rect.y - (ui:rect.h-rect.h);
                        var int min_dy = min_y - ui:rect.y;
                        if pt1.y < min_dy then
                            pt1.y = min_dy;
                        end
                    end
                    emit go_y=1;
                else
                    pt1.y = 0;
                end

                if pt1.x!=0 or pt1.y!=0 then
                    emit ui:go_move = &pt1;
                end

                //ui:rect.x = ui:rect.x + pt1.x;
                //ui:rect.y = ui:rect.y + pt1.y;
                //emit ui:go_redim = &ui:rect;

                pt1 = pt2;
            end
        end
    with
        par do
            await go_x;
            loop do
                par/or do
                    await 1s;
                    go_x = 0;
                    await FOREVER;
                with
                    await go_x;
                end
            end
        with
            await go_y;
            loop do
                par/or do
                    await 1s;
                    go_y = 0;
                    await FOREVER;
                with
                    await go_y;
                end
            end
        end
    with
        loop do
            if r != null then
                rect = *r;
            end
            emit ui:go_redim = r;
            r = await go_redim;
        end
    with
        loop do
            var _SDL_Point* pt = await go_move;
            rect.x = rect.x + pt:x;
            rect.y = rect.y + pt:y;
            emit ui:go_move=pt;
        end
    with
        var _SDL_Renderer* ren = global:ren;
        loop do
            await go_redraw;
            _glEnable(_GL_SCISSOR_TEST);
            _glScissor(rect.x,global:win_rect.h-rect.y-rect.h,rect.w,rect.h);
            emit ui:go_redraw;
            _glDisable(_GL_SCISSOR_TEST);

            if go_x then
                var _SDL_Rect rs;
                    rs.x = rect.x + (rect.x-ui:rect.x) * rect.w / ui:rect.w;
                    rs.y = rect.y + rect.h - 6;
                    rs.w = rect.w*rect.w / ui:rect.w;
                    rs.h = 5;
                _SDL_SetRenderDrawBlendMode(ren, _SDL_BLENDMODE_BLEND);
                _SDL_SetRenderDrawColor(ren, scroll_clr.r,
                                             scroll_clr.g,
                                             scroll_clr.b, 100);
                _SDL_RenderFillRect(ren, &rs);
            end

            if go_y then
                var _SDL_Rect rs;
                    rs.x = rect.x + rect.w - 6;
                    rs.y = rect.y + (rect.y-ui:rect.y) * rect.h / ui:rect.h;
                    rs.w = 5;
                    rs.h = rect.h*rect.h / ui:rect.h;
                _SDL_SetRenderDrawBlendMode(ren, _SDL_BLENDMODE_BLEND);
                _SDL_SetRenderDrawColor(ren, scroll_clr.r,
                                             scroll_clr.g,
                                             scroll_clr.b, 100);
                _SDL_RenderFillRect(ren, &rs);
            end

            _SDL_SetRenderDrawBlendMode(ren, _SDL_BLENDMODE_NONE);
        end
    end
end

/*}-}*/ dnl
