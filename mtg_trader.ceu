@include(lua.ceu);
@include(sdl.ceu);

C _DIR(), _DIR_;
C do
    static char* DIR_;
    char DIR_path[256];

    char* DIR (char* filename) {
        snprintf(DIR_path, 255, "%s/%s", DIR_, filename);
        return DIR_path;
    }
end

input void START;
input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_WindowEvent*      SDL_WINDOWEVENT;
input _SDL_KeyboardEvent*    SDL_KEYDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;

interface Global with
// lua
    var   _lua_State*       lua;
// screen
    var   _SDL_Renderer*    ren;
    var   _SDL_Rect         win_rect;
// sound
    event _Mix_Chunk*       go_sound;
    var   _Mix_Chunk*       snd_chg, snd_add, snd_rem;
    //var int               mute?;
// other
    event int               go_opt;
end

@include(ui.ceu);
@include(uigrid.ceu);
@include(uiscroll.ceu);
@include(uitextfield.ceu);
@include(luagrid.ceu);

@include(find.ceu);
@include(single.ceu);
@include(vs.ceu);

event int go_opt;

// screen
    var _SDL_Rect win_rect;
        win_rect.x = 0;
        win_rect.y = 0;
    var _SDL_Window* win := _SDL_CreateWindow("MTG Trader",
                                //500, 1300, 320, 240, _SDL_WINDOW_SHOWN);
                                //500, 1300, 400, 240, _SDL_WINDOW_SHOWN);
                                //500, 1300, 432, 240, _SDL_WINDOW_SHOWN);
                                //500, 1300, 480, 320, _SDL_WINDOW_SHOWN);
                                //500, 1300, 640, 480, _SDL_WINDOW_SHOWN);
                                500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
                                //500, 1300, 1280, 800, _SDL_WINDOW_SHOWN);
                                //500, 1300, 800, 480, _SDL_WINDOW_RESIZABLE);
    //_SDL_SetWindowFullscreen(win, _SDL_TRUE);
    _SDL_GetWindowSize(win, &win_rect.w, &win_rect.h);

    if win_rect.h < 400 then
        _DIR_ = "imgs/low";
    else/if win_rect.h < 800 then
        _DIR_ = "imgs/medium";
    else
        _DIR_ = "imgs/medium";
    end

    var _SDL_Renderer* ren := _SDL_CreateRenderer(win, -1,
                                _SDL_RENDERER_ACCELERATED|_SDL_RENDERER_PRESENTVSYNC);

    var _SDL_Texture* tex_mute := _IMG_LoadTexture(ren, _DIR("no.png"));

    _TTF_Init();

    C _SDL_filter ();
    C do
        int SDL_filter (void* userdata, SDL_Event* event) {
            int s = (event->type != SDL_MOUSEMOTION)
                && (event->type != SDL_FINGERMOTION);
            return (event->type != SDL_MOUSEMOTION)
                && (event->type != SDL_FINGERMOTION);
        }
    end
    _SDL_SetEventFilter(_SDL_filter, null);

// sound
    _Mix_OpenAudio(22050, _AUDIO_S16SYS, 2, 4096);
    event _Mix_Chunk* go_sound;
    //var int mute? = 0;
    var _Mix_Chunk* snd_chg := _Mix_LoadWAV("snds/chg.wav");
    var _Mix_Chunk* snd_add := _Mix_LoadWAV("snds/add.wav");
    var _Mix_Chunk* snd_rem := _Mix_LoadWAV("snds/rem.wav");

// lua
    var _lua_State* lua := _luaL_newstate();
    _lua_atpanic(lua, _ceu_lua_atpanic);
    _luaL_openlibs(lua);
    var int idx = _lua_gettop(lua);

    // W / H
        _lua_pushnumber(lua, win_rect.w);   // [ W ]
        _lua_setglobal(lua, "UI_W");        // [ ]
        _lua_pushnumber(lua, win_rect.h);   // [ H ]
        _lua_setglobal(lua, "UI_H");        // [ ]

    @ifdef(`ANDROID',`
        _lua_pushboolean(lua, 1);           // [ true ]
        _lua_setglobal(lua, "ANDROID");     // [ ]
        _luaL_dofile(lua,                   // [ cards ]
            "/data/data/org.droid_in_the_sky.mtg_trader/lib/lib_lua_cards.so");
        _lua_setglobal(lua, "CARDS");       // [ ]
        _luaL_dofile(lua,
            "/data/data/org.droid_in_the_sky.mtg_trader/lib/lib_lua_global.so");
    ',`
        _luaL_dofile(lua, "lua/cards.lua"); // [ cards ]
        _lua_setglobal(lua, "CARDS");       // [ ]
        _luaL_dofile(lua, "lua/global.lua");
    ')
    _lua_settop(lua, idx);
    _LuaGrid_res_load(lua, ren, win_rect.h);

do      // LOCALS
    // MAIN
    var LuaGrid main;
        _lua_getglobal(lua, "grid_main");       // [ t ]
        main.ref = _luaL_ref(lua, _LUA_REGISTRYINDEX);
        emit main.go;                           // [ ]

    // TXT
    var UITextField txt;
        txt.font := _TTF_OpenFont("fnts/monofonto.ttf", win_rect.h/24);
        txt.font_own? = 1;
        // clr_bg = WHITE
            txt.clr_bg.r = 0xFF;
            txt.clr_bg.g = 0xFF;
            txt.clr_bg.b = 0xFF;
        // clr_fg = BLACK
            txt.clr_fg.r = 0x00;
            txt.clr_fg.g = 0x00;
            txt.clr_fg.b = 0x00;
        emit txt.go;

    // BAR
        var UIGrid* bar = <UIGrid*> main.grid.uis[0];
        bar:uis[1] = &txt;

//if 0 then   // VALGRIND

    emit main.grid.go_redim = &win_rect;

    var int mute? = 0;

    par/or do
        await SDL_QUIT;
    with
/**
        // SIMUL
        @include(simul.ceu);
        // TODO: get allocated memory
    with
**/
/*
        loop do
            var _SDL_WindowEvent* evt = await SDL_WINDOWEVENT;
            if evt:event == _SDL_WINDOWEVENT_RESIZED then

                var int dx = evt:data1 - win_rect.w;
                win_rect.x = win_rect.x - dx;
                win_rect.w = evt:data1;

                var int dy = evt:data2 - win_rect.h;
                win_rect.y = win_rect.y - dy;
                win_rect.h = evt:data2;

                //ren := _SDL_CreateRenderer(win, -1,
                            //_SDL_RENDERER_ACCELERATED|_SDL_RENDERER_PRESENTVSYNC);
                win_rect.w = evt:data1;
                win_rect.h = evt:data2;
                ren := _SDL_CreateRenderer(win, -1,
                            _SDL_RENDERER_ACCELERATED|_SDL_RENDERER_PRESENTVSYNC);
                emit main.grid.go_redim = &win_rect;
            end
        end
    with
*/
        emit main.grid.go_redim = &win_rect;
        await START;

        var int opt = 1;
        var _char* fnd_str = "";
        loop do
            event UI* d = null;

            par/or do
                await/0 d;
                main.grid.ui_ptr := d;
                emit main.grid.go_ui=1;
                await FOREVER;
            with
                fnd_str = await txt.ok_keyboard; // concurrent w/ ok_uiclicked
                opt = 1;
            with
                loop do
                    var int o = await bar:ok_uiclicked; // VS=3, L1=4, L2=5
                    if o == 3 then
                        mute? = not mute?;
                        emit go_sound=snd_chg;
                    else
                        emit go_sound=snd_chg;
                        opt = o;
                        break;
                    end
                end
            with
                await global:go_opt;
                // keep opt
            with
                emit global:go_opt = opt;

                // FIND
                if opt==1 or opt==2 then
                    var Find fnd;
                        fnd.str = fnd_str;
                        emit fnd.go;
                    emit d = fnd.ui;
                    await FOREVER;

                // VS
                else/if opt == 4 then
                    var VS vs;
                        emit vs.go;
                    emit d = vs.ui;
                    await FOREVER;

                // L1 / L2
                else/if opt==5 or opt==6 then
                    var Single lst;
                        if opt == 5 then
                            lst.name = "L1";
                        else
                            lst.name = "L2";
                        end
                        emit lst.go;
                    emit d = lst.ui;
                    await FOREVER;
                end
                await FOREVER;
            end
        end
    with
        // SOUND
        loop do
            var _Mix_Chunk* snd = await go_sound;
            if not mute? then
                _Mix_PlayChannel(-1, snd, 0);
            end
        end
    with
        // MOUSE
        loop do
            var _SDL_MouseButtonEvent* but = await SDL_MOUSEBUTTONDOWN;
            emit main.grid.go_mousebuttondown=but;
        end
    with
        // REDRAW
        par do
            loop do
                await SDL_REDRAW;
                emit main.grid.go_redraw;
                if mute? then
                    _SDL_RenderCopy(ren, tex_mute, null, &bar:uis[2]:rect);
                end
                _SDL_RenderPresent(ren);
            end
        with
            var int opt;
            loop do
                par/or do
                    opt = await global:go_opt;
                with
                    if opt < 5 then
                        await FOREVER;
                    end
                    var UI* ui = bar:uis[opt-1];
                    await ui:ok_redraw_pre;
                    _SDL_SetRenderDrawColor(ren, 255,255,0,0);
                    _SDL_RenderFillRect(ren, &ui:rect);
                end
            end
        end
    end

//end         // VALGRIND

end     // LOCALS

// sound
    _Mix_FreeChunk(snd_add);
    _Mix_FreeChunk(snd_rem);
    _Mix_CloseAudio();            // TODO: slow

// lua
    _LuaGrid_res_unload(lua);
    _lua_close(lua);

// screen
    _SDL_DestroyTexture(tex_mute);
    _TTF_Quit();
    _SDL_DestroyRenderer(ren);
    _SDL_DestroyWindow(win);

return 0;

/*
==5946== ==5946== HEAP SUMMARY:
==5946==     in use at exit: 63,557 bytes in 631 blocks
==5946==   total heap usage: 182,050 allocs, 181,419 frees, 113,166,121 bytes allocated
==5946== LEAK SUMMARY:
==5946==    definitely lost: 870 bytes in 13 blocks
==5946==    still reachable: 62,687 bytes in 618 blocks
==5946== ERROR SUMMARY: 9481 errors from 5 contexts (suppressed: 234 from 11)
===============================================================================
-- 30 min and RenderDrawRect
==16473== HEAP SUMMARY:
==16473==     in use at exit: 63,645 bytes in 632 blocks
==16473==   total heap usage: 467,626 allocs, 466,994 frees, 321,235,528 bytes allocated
==16473== LEAK SUMMARY:
==16473==    definitely lost: 958 bytes in 14 blocks
==16473==    still reachable: 62,687 bytes in 618 blocks
==16473== ERROR SUMMARY: 4454740 errors from 7 contexts (suppressed: 234 from 11)
*/
