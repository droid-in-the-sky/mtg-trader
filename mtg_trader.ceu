@include(lua.ceu);
@include(sdl.ceu);

input void START;
input void SDL_REDRAW;
input void SDL_QUIT;
input _SDL_WindowEvent*      SDL_WINDOWEVENT;
input _SDL_KeyboardEvent*    SDL_KEYDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONDOWN;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONUP;
input _SDL_MouseMotionEvent* SDL_MOUSEMOTION;


interface Global with
    event void              go_opt;
// screen
    var   _SDL_Renderer*    ren;
    var   _SDL_Rect         win_rect;
    var   _SDL_Color        clr_bg, clr_txt;
    var   _TTF_Font*        font;
// lua
    var   _lua_State*       lua;
    var   int               ref_l1, ref_l2;
// sound
    event _Mix_Chunk*       go_sound;
    var   _Mix_Chunk*       snd_add, snd_rem;
    //var int               mute?;
end

@include(uidrawable.ceu);
@include(uigrid.ceu);
//@include(uiscroll.ceu);
@include(uitextfield.ceu);

@include(list.ceu);
@include(find.ceu);
@include(single.ceu);
@include(vs.ceu);

event void go_opt;

// screen
    var _SDL_Rect win_rect;
        win_rect.x = 0;
        win_rect.y = 0;
    var _SDL_Window* win := _SDL_CreateWindow("MTG Trader",
                                500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
                                //500, 1300, 800, 480, _SDL_WINDOW_RESIZABLE);
    //_SDL_SetWindowFullscreen(win, _SDL_TRUE);
    _SDL_GetWindowSize(win, &win_rect.w, &win_rect.h);

    var _SDL_Renderer* ren := _SDL_CreateRenderer(win, -1,
                                _SDL_RENDERER_ACCELERATED|_SDL_RENDERER_PRESENTVSYNC);

    var _SDL_Color clr_bg;  // WHITE
        clr_bg.r = 0xCC;
        clr_bg.g = 0xCC;
        clr_bg.b = 0xCC;

    var _SDL_Color clr_txt; // BLACK
        clr_txt.r = 0x33;
        clr_txt.g = 0x33;
        clr_txt.b = 0x33;

    _TTF_Init();
    var _TTF_Font* font := _TTF_OpenFont("fnts/monofonto.ttf", win_rect.h/24);

// lua
    var _lua_State* lua := _luaL_newstate();
    _luaL_openlibs(lua);
    _luaL_dofile(lua, "lua/find.lua");      // [ find ]
    _luaL_dofile(lua, "lua/cards.lua");     // [ find | cards ]
    //_luaL_dofile(lua,
    //    "/data/data/org.droid_in_the_sky.mtg_trader/lib/lib_lua_find.so");
    //_luaL_dofile(lua,
    //    "/data/data/org.droid_in_the_sky.mtg_trader/lib/lib_lua_cards.so");
    _lua_getglobal(lua, "table");       // [ find | cards | table ]
    _lua_getfield(lua, 3, "remove");    // [ find | cards | table | t_rem ]
    _lua_remove(lua, 3);                // [ find | cards | t_rem ]
    _lua_newtable(lua);                 // [ find | cards | t_rem | l1 ]
    _lua_newtable(lua);                 // [ find | cards | t_rem | l1 | l2 ]
    var int ref_l1 = _luaL_ref(lua, _LUA_REGISTRYINDEX);
    var int ref_l2 = _luaL_ref(lua, _LUA_REGISTRYINDEX);
                                        // [ find | cards | t_rem ]
// sound
    _Mix_OpenAudio(22050, _AUDIO_S16SYS, 2, 4096);
    event _Mix_Chunk* go_sound;
    //var int mute? = 0;
    var _Mix_Chunk* snd_add := _Mix_LoadWAV("snds/add.wav");
    var _Mix_Chunk* snd_rem := _Mix_LoadWAV("snds/rem.wav");

do      // LOCALS

    var UITexDrawable tex_find;
        tex_find.tex := _IMG_LoadTexture(ren, "imgs/find.png");
        tex_find.tex_own? = 1;

    var UITexDrawable tex_l1;
        tex_l1.tex := _IMG_LoadTexture(ren, "imgs/list.png");
        tex_l1.tex_own? = 1;
    var UITexDrawable tex_l2;
        tex_l2.tex := _IMG_LoadTexture(ren, "imgs/list.png");
        tex_l2.tex_own? = 1;

    var UITexDrawable tex_vs;
        tex_vs.tex := _IMG_LoadTexture(ren, "imgs/vs.png");
        tex_vs.tex_own? = 1;

    C _lay_main, _lay_bar, _lay_find;
    C do
        u8 lay_main[8] = { 1, 2, 2, 2, 2, 2, 2, 2 };
        u8 lay_bar[10] = { 1, 2, 2, 2, 2, 2, 0, 3, 4, 5 };
    end

    var UITextField txt;
        txt.font = font;
        // clr_bg           // WHITE
            txt.clr_bg.r = 0xFF;
            txt.clr_bg.g = 0xFF;
            txt.clr_bg.b = 0xFF;
        // clr_fg = BLACK
            txt.clr_fg.r = 0x00;
            txt.clr_fg.g = 0x00;
            txt.clr_fg.b = 0x00;

    var UIDrawable*[5] bar_draws;
    var UIGrid bar;
        bar.clr_bg? = 1;    // BROWN
            bar.clr_bg.r = 0x40;
            bar.clr_bg.g = 0x0D;
            bar.clr_bg.b = 0x12;
        bar.spc_x    =  5;
        bar.spc_y    = 10;
        bar.lay_lins =  1;
        bar.lay_cols = 10;
        bar.lay      = _lay_bar;
        bar.it_n     = 5;
        bar.it_draws = bar_draws;
            bar_draws[0] = &tex_find;
            bar_draws[1] = &txt;
            bar_draws[2] = &tex_vs;
            bar_draws[3] = &tex_l1;
            bar_draws[4] = &tex_l2;

    var UIDrawable*[2] main_draws;
    var UIGrid main;
        main.lay_lins = 8;
        main.lay_cols = 1;
        main.lay      = _lay_main;
        main.it_n     = 2;
        main.it_draws = main_draws;
            main_draws[0] = &bar;
            main_draws[1] = null;

// TODO: memory peek
/*
if 0 then   // VALGRIND
==5946== ==5946== HEAP SUMMARY:
==5946==     in use at exit: 63,557 bytes in 631 blocks
==5946==   total heap usage: 182,050 allocs, 181,419 frees, 113,166,121 bytes allocated
==5946== 
==5946== LEAK SUMMARY:
==5946==    definitely lost: 870 bytes in 13 blocks
==5946==    indirectly lost: 0 bytes in 0 blocks
==5946==      possibly lost: 0 bytes in 0 blocks
==5946==    still reachable: 62,687 bytes in 618 blocks
==5946==         suppressed: 0 bytes in 0 blocks
==5946== Rerun with --leak-check=full to see details of leaked memory
==5946== 
==5946== For counts of detected and suppressed errors, rerun with: -v
==5946== Use --track-origins=yes to see where uninitialised values come from
==5946== ERROR SUMMARY: 9481 errors from 5 contexts (suppressed: 234 from 11)
===============================================================================
-- 30 min and RenderDrawRect
==16473== HEAP SUMMARY:
==16473==     in use at exit: 63,645 bytes in 632 blocks
==16473==   total heap usage: 467,626 allocs, 466,994 frees, 321,235,528 bytes allocated
==16473== 
==16473== LEAK SUMMARY:
==16473==    definitely lost: 958 bytes in 14 blocks
==16473==    indirectly lost: 0 bytes in 0 blocks
==16473==      possibly lost: 0 bytes in 0 blocks
==16473==    still reachable: 62,687 bytes in 618 blocks
==16473==         suppressed: 0 bytes in 0 blocks
==16473== Rerun with --leak-check=full to see details of leaked memory
==16473== 
==16473== For counts of detected and suppressed errors, rerun with: -v
==16473== Use --track-origins=yes to see where uninitialised values come from
==16473== ERROR SUMMARY: 4454740 errors from 7 contexts (suppressed: 234 from 11)
*/

    par/or do
        await SDL_QUIT;
    with
        loop do
            // TODO: background
            var _SDL_KeyboardEvent* key = await SDL_KEYDOWN;
            if key:keysym.scancode == _SDL_SCANCODE_AC_BACK then
                //break;
            end
        end
    with
/**
        // SIMUL
        @include(simul.ceu);
        // TODO: get allocated memory
    with
**/
/*
        loop do
            var _SDL_WindowEvent* evt = await SDL_WINDOWEVENT;
            if evt:event == _SDL_WINDOWEVENT_RESIZED then

                var int dx = evt:data1 - win_rect.w;
                win_rect.x = win_rect.x - dx;
                win_rect.w = evt:data1;

                var int dy = evt:data2 - win_rect.h;
                win_rect.y = win_rect.y - dy;
                win_rect.h = evt:data2;

                //ren := _SDL_CreateRenderer(win, -1,
                            //_SDL_RENDERER_ACCELERATED|_SDL_RENDERER_PRESENTVSYNC);
                win_rect.w = evt:data1;
                win_rect.h = evt:data2;
                ren := _SDL_CreateRenderer(win, -1,
                            _SDL_RENDERER_ACCELERATED|_SDL_RENDERER_PRESENTVSYNC);
_printf("%d %d\n", win_rect.w, win_rect.h);
                emit main.go_redim = &win_rect;
            end
        end
    with
*/
        await START;

        var _char* fnd_str = "";
        var int opt = 1;
        loop do
            var Find*   fnd;
            var Single* lst;
            var VS* vs;

            par/or do
                fnd_str = await txt.ok_keyboard;
                opt = 1;
            with
                var int* p = await bar.ok_clicked;
                opt = *p;   // VS=3, L1=4, L2=5
            with
                await global:go_opt;
                // keep opt
            with

                // FIND
                if opt==1 or opt==2 then
                    fnd = new Find;
                        fnd:str  = fnd_str;
                        emit fnd:go;
                    main.it_draws[1] = &fnd:grid;

                // VS
                else/if opt == 3 then
                    vs = new VS;
                        emit vs:go;
                    main.it_draws[1] = &vs:grid;

                // L1 / L2
                else/if opt==4 or opt==5 then
                    lst = new Single;
                        if opt == 4 then
                            lst:ref = global:ref_l1;
                        else
                            lst:ref = global:ref_l2;
                        end
                        emit lst:go;
                    main.it_draws[1] = &lst:grid;
                end

                if opt != 0 then
                    emit main.go_redim=&win_rect;
                end
                await FOREVER;
            end
        finally
            main.it_draws[1] = null;
        end
    with
        // SOUND
        loop do
            var _Mix_Chunk* snd = await go_sound;
            //if not mute? then
                _Mix_PlayChannel(-1, snd, 0);
            //end
        end
    with
        // MOUSE
        loop do
            var _SDL_MouseButtonEvent* but = await SDL_MOUSEBUTTONDOWN;
            emit main.go_mousebuttondown=but;
        end
    with
        // REDRAW
        loop do
            await SDL_REDRAW;
            emit main.go_redraw;
            _SDL_RenderPresent(ren);
        end
    end

//end         // VALGRIND

end     // LOCALS

// sound
    _Mix_FreeChunk(snd_add);
    _Mix_FreeChunk(snd_rem);
    _Mix_CloseAudio();            // TODO: slow

// lua
    _lua_close(lua);

// screen
    _TTF_CloseFont(font);
    _TTF_Quit();
    _SDL_DestroyRenderer(ren);
    _SDL_DestroyWindow(win);

return 0;
